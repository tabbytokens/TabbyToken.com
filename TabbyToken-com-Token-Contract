// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract TABBYTOKEN is ERC20, Ownable, ReentrancyGuard {
    uint256 private constant INITIAL_SUPPLY = 0;
    uint256 private constant TOKEN_CAP = 1000000000000000000 * 10**18; // 1 quintillion
    uint256 private constant PHASE_BLOCKS = 10523; // Adjusted for 4-year duration
    uint256 private constant PHASE_COUNT = 999;
    uint256 private immutable deployBlock;
    uint256 public constant MAX_TOKENS_PER_TX = 86400 * 10**18; // 1 day of tokens if one per second.


    constructor() ERC20("TABBYTOKEN", "TABBY") Ownable(msg.sender) {
        _mint(msg.sender, INITIAL_SUPPLY);
        deployBlock = block.number;
    }

    function mint(address to, uint256 amount) public nonReentrant {
        require(amount <= MAX_TOKENS_PER_TX, "Cannot mint more than the maximum tokens per transaction");
        uint256 currentPhase = (block.number - deployBlock) / PHASE_BLOCKS;

        uint256 mintRatio;
        if (currentPhase < PHASE_COUNT) {
            mintRatio = 1000 - currentPhase;
        } else {
            mintRatio = 1;
        }

        uint256 adjustedAmount = (amount * mintRatio) / 1000;
        
        // Ensure minting does not exceed the TOKEN_CAP
        require(totalSupply() + adjustedAmount <= TOKEN_CAP, "Minting would exceed token cap");

        _mint(to, adjustedAmount);
    }

    function getCurrentPhase() public view returns (uint256) {
        return (block.number - deployBlock) / PHASE_BLOCKS;
    }
}
